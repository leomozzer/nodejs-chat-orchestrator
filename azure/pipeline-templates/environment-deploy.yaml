parameters:
  - name: terraformVersion
    type: string
  - name: projectName
    type: string
  - name: workingDirectory
    type: string
  - name: environments
    type: object

variables:
  workingDirectory: ${{parameters.workingDirectory}}
  terraformDirectory: ${{parameters.workingDirectory}}/azure
  terraformVersion: ${{parameters.terraformVersion}}
  projectName: ${{parameters.projectName}}
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: plan
    displayName: Plan
    jobs:
      - ${{each environment in parameters.environments}}:
          - job: backend_${{environment.stage}}
            displayName: Backend ${{environment.stage}}
            steps:
              - template: steps/tfstate-rg.yaml
                parameters:
                  environment: ${{environment}}

          - job: plan_${{environment.stage}}
            dependsOn: backend_${{environment.stage}}
            displayName: Plan ${{environment.stage}}
            steps:
              - template: steps/terraform-plan.yaml
                parameters:
                  environment: ${{environment}}

  - ${{each environment in parameters.environments}}:
      - stage: apply_${{environment.stage}}
        condition: and(succeeded('plan'), eq(variables.isMain, 'true'))
        dependsOn: plan
        displayName: Apply ${{environment.stage}}
        jobs:
          - deployment:
            environment: ${{environment.environment}}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - template: steps/terraform-apply.yaml
                      parameters:
                        environment: ${{environment}}
        # jobs:
        #   - job: apply_${{environment.stage}}
        #     displayName: Apply ${{environment.stage}}
        #     steps:
        #       - template: steps/terraform-apply.yaml
        #         parameters:
        #           environment: ${{environment}}

      - stage: app_service_${{environment.stage}}
        dependsOn: apply_${{environment.stage}}
        displayName: App Service ${{environment.stage}}
        jobs:
          - job: build_${{environment.stage}}
            displayName: Build ${{environment.stage}} backend
            steps:
              # - task: AzureCLI@2
              #   displayName: 'Application settings backend'
              #   inputs:
              #     azureSubscription: ${{environment.serviceConnection}}
              #     scriptType: 'bash'
              #     scriptLocation: 'inlineScript'
              #     inlineScript: |
              #       az webapp identity assign --resource-group $(projectName)-${{environment.environment}}-rg --name ${{environment.backendWebApp}}
              #       objectId=$(az webapp identity show --name ${{environment.backendWebApp}} --resource-group $(projectName)-${{environment.environment}}-rg --query principalId --output tsv)
              #       keyVault=$(az keyvault list --resource-group $(projectName)-${{environment.environment}}-rg --output tsv --query [0].name)
              #       az keyvault set-policy --name $keyVault --secret-permissions get --object-id $objectId

              #       server=$(az mysql server list --resource-group $(projectName)-${{environment.environment}}-rg --output tsv --query [0].fullyQualifiedDomainName)
              #       az webapp config appsettings set --name ${{environment.backendWebApp}} --resource-group $(projectName)-${{environment.environment}}-rg --settings MYSQL_HOST=$server

              #       mysqlUser=$(az keyvault secret show --name mysqlUser --vault-name $keyVault --query value)
              #       az webapp config appsettings set --name ${{environment.backendWebApp}} --resource-group $(projectName)-${{environment.environment}}-rg --settings MYSQL_USER=$mysqlUser

              #       mysqlPassword=$(az keyvault secret show --name mysqlPassword --vault-name $keyVault --query "value")
              #       az webapp config appsettings set --name ${{environment.backendWebApp}} --resource-group $(projectName)-${{environment.environment}}-rg --settings MYSQL_ROOT_PASSWORD=$mysqlPassword

              #       az webapp config appsettings set --name ${{environment.backendWebApp}} --resource-group $(projectName)-${{environment.environment}}-rg --settings MYSQL_DATABASE=db

              - template: steps/app-service-build-deploy.yaml
                parameters:
                  environment: ${{environment}}
                  webAppName: ${{environment.backendWebApp}}
                  appDirectory: ${{environment.backendDirectory}}