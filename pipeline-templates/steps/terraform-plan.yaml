parameters:
  - name: environment
    type: object

steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform $(terraformVersion)
    inputs:
      terraformVersion: $(terraformVersion)

  - task: Bash@3
    displayName: Terraform fmt check
    inputs:
      targetType: inline
      script: terraform fmt -check -recursive -diff $(workingDirectory)

  - task: Bash@3
    displayName: Ensure ${{parameters.environment.stage}}.tfvars
    inputs:
      targetType: inline
      script: touch $(workingDirectory)/terraform-live/${{parameters.environment.stage}}.tfvars

  Workaround for https://github.com/microsoft/azure-pipelines-extensions/issues/664
  - powershell: |
      New-Item -Path "$(workingDirectory)/terraform-live" -Name "backend.tf" -Value "terraform {`r`nbackend `"azurerm`" {}`r`n}"
      New-Item -Path "$(workingDirectory)/terraform-live" -Name "azurerm_provider.tf" -Value "provider `"azurerm`"{`r`nskip_provider_registration = true`r`nfeatures {`r`npurge_soft_delete_on_destroy = true`nrecover_soft_deleted_key_vaults = true`r`n}`r`n}"
    displayName: Create terraform files

  - task: TerraformTaskV2@2
    displayName: Terraform init ${{parameters.environment.stage}}
    inputs:
      command: init
      workingDirectory: $(workingDirectory)/terraform-live
      backendType: azurerm
      backendServiceArm: ${{parameters.environment.serviceConnection}}
      backendAzureRmResourceGroupName: ${{parameters.environment.resourceGroup}}
      backendAzureRmStorageAccountName: ${{parameters.environment.storageAccount}}
      backendAzureRmContainerName: states
      backendAzureRmKey: $(projectName).tfstate
      commandOptions: -reconfigure

  - task: TerraformTaskV2@2
    displayName: Terraform plan ${{parameters.environment.stage}}
    inputs:
      command: plan
      workingDirectory: $(workingDirectory)/terraform-live
      environmentServiceNameAzureRM: ${{parameters.environment.serviceConnection}}
      commandOptions: -var-file="${{parameters.environment.stage}}.tfvars" -lock=$(isMain) -lock-timeout=10m -out=${{parameters.environment.stage}}.plan
      publishPlanResults: plan

  - task: ArchiveFiles@2
    displayName: Archive terraform-live and plan
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    inputs:
      includeRootFolder: false
      rootFolderOrFile: $(workingDirectory)/terraform-live
      archiveType: tar
      archiveFile: terraform-live-${{parameters.environment.stage}}.tar

  - task: AzureCLI@2
    displayName: Copy ${{parameters.environment.stage}} live plan to Storage
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    inputs:
      azureSubscription: ${{parameters.environment.serviceConnection}}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az storage blob upload \
          --container-name plans \
          --file terraform-live-${{parameters.environment.stage}}.tar \
          --name $(projectName)-$(Build.BuildNumber)-$(Build.BuildId)-live-${{parameters.environment.stage}}.tar \
          --account-name ${{parameters.environment.storageAccount}}
