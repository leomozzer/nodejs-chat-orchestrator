name: 'Terraform Plan'
description: "Performs the terraform plan"

inputs:
 # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID:
    description: "AWS access key"
    required: true
  AWS_SECRET_ACCESS_KEY: 
    description: "AWS secret key"
    required: true
  #AWS defaul region
  AWS_DEFAULT_REGION:
    description: "AWS secret key"
    required: false
    default: us-east-1
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: 
    description: "S3 bucket for the Terraform state"
    required: true
  #Terraform Version
  TERRAFORM_VERSION:
    description: "Terraform version"
    required: true
  STAGE:
    description: "Running stage"
    required: true
  WORKING_DIR:
    description: "Terraform working directory"
    required: true

runs:
  using: "composite"
  steps:
  - name: Checkout
    uses: actions/checkout@v3

  - name: ls
    shell: bash
    run: |
      ls -ltr
    working-directory: ${{ inputs.WORKING_DIR }}/terraform-live

  - name: Upload to S3
    shell: bash
    run: |
      aws s3 mb s3://$BUCKET_TF_STATE
    env:
      AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}
      
  - name: Setup Terraform with specified version on the runner
    uses: hashicorp/setup-terraform@v2
    with:
      terraform_version: ${{ inputs.TERRAFORM_VERSION }}

  - name: Terraform format
    shell: bash
    id: fmt
    run: terraform fmt -check
    working-directory: ${{ inputs.WORKING_DIR }}/terraform-live

  - name: Terraform init
    shell: bash
    id: init
    run: terraform init -backend-config="bucket=$BUCKET_TF_STATE" -backend-config="key=states/terraform.tfstate"
    working-directory: ${{ inputs.WORKING_DIR }}/terraform-live

  - name: Terraform Plan
    shell: bash
    id: plan
    run: terraform plan -var-file="${{ inputs.STAGE }}.tfvars" -lock-timeout=10m -out=${{ inputs.STAGE }}.plan
    continue-on-error: false
    working-directory: ${{ inputs.WORKING_DIR }}/terraform-live

  - name: Archive terraform-live and plan
    uses: a7ul/tar-action@v1.1.0
    id: compress-terraform-live
    with:
      command: c
      cwd: ${{ inputs.WORKING_DIR }}
      files: |
        ./terraform-live
      outPath: ${{ inputs.WORKING_DIR }}/terraform-live/terraform-live-${{ inputs.STAGE }}.tar

  - name: Upload terraform-live and plan to S3
    shell: bash
    run: |
      aws s3 cp ${{ inputs.WORKING_DIR }}/terraform-live/terraform-live-${{ inputs.STAGE }}.tar s3://$BUCKET_TF_STATE/plans/terraform-live-${{ inputs.STAGE }}-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ID.tar
    env:
      AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}

  - name: Archive terraform-modules
    uses: a7ul/tar-action@v1.1.0
    id: compress-terraform-modules
    with:
      command: c
      cwd: ${{ inputs.WORKING_DIR }}
      files: |
        ./terraform-modules
      outPath: ${{ inputs.WORKING_DIR }}/terraform-modules/terraform-modules-${{ inputs.STAGE }}.tar

  - name: Upload terraform-modules to S3
    shell: bash
    run: |
      aws s3 cp ${{ inputs.WORKING_DIR }}/terraform-modules/terraform-modules-${{ inputs.STAGE }}.tar s3://$BUCKET_TF_STATE/plans/terraform-modules-${{ inputs.STAGE }}-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ID.tar
    env:
      AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}